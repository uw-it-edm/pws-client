buildscript {
    ext {
        springBootVersion = '2.0.8.RELEASE'
        springReleaseTrain = 'Cairo-SR7'
    }
    repositories {
        jcenter()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/plugins-release' }
        maven { url "https://raw.githubusercontent.com/uw-it-edm/edm-artifacts/master" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "edu.uw.concert:gradle-gitflow:0.3.1"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.21.0")
        classpath("nu.studer:gradle-credentials-plugin:1.0.4")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.gorylenko.gradle-git-properties'
    apply plugin: 'edu.uw.concert.gitflow'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    apply plugin: 'nu.studer.credentials'
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    gitflow {
        // fix git repository to ./ to work with submodules
        repositoryRoot './'
    }
    
    task wrapper(type: Wrapper) {
        gradleVersion = '4.2.1'
    }

    repositories {
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:$springReleaseTrain"
        }
    }

    dependencies {

        compileOnly("org.springframework.boot:spring-boot-starter-web")
        compileOnly("org.projectlombok:lombok:1.18.12")

        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                // Override the default artifact ID (or try to)

                groupId = 'edu.uw.edm.pws'

                // Set the parent so that the pom we get is valid -- otherwise we don't have any version numbers
                // for the Spring dependencies
                pom.withXml {
                    asNode().appendNode('parent')
                            .appendNode('groupId', 'org.springframework.boot').parent()
                            .appendNode('artifactId', 'spring-boot-starter-parent').parent()
                            .appendNode('version', "${project.springBootVersion}")

                    asNode().appendNode('repositories').appendNode('repository')
                            .appendNode('id', 'spring-releases').parent()
                            .appendNode('url', 'https://repo.spring.io/libs-release')
                }
            }
        }
    }


    artifactory {
        contextUrl = System.getenv('ARTIFACTORY_CONTEXT')
        //The base Artifactory URL if not overridden by the publisher/resolver


        publish {
            repository {
                // The Artifactory repository key to publish to
                def inferredRepoKey = System.getenv('ARTIFACTORY_SNAPSHOT_REPO')

                if (!version.toString().contains("SNAPSHOT") && !version.toString().contains("dirty")) {
                    inferredRepoKey = System.getenv('ARTIFACTORY_RELEASE_REPO')
                }

                repoKey = inferredRepoKey
                logger.lifecycle "Using $inferredRepoKey as publishing repo"

                // Username comes from ~/.gradle/gradle.properties
                def resolveUserName = project.getProperties().get('eaiw.artifactoryPublishUser')
                if (!resolveUserName?.trim()) {
                    // try to get it from an environment variable
                    resolveUserName = System.getenv("ARTIFACTORY_PUBLISH_USER")
                }

                username = resolveUserName

                // Password comes from ~/.gradle/gradle.encrypted.properties
                if (credentials?.propertyMissing(resolveUserName)) {
                    password = credentials[resolveUserName]
                } else {
                    // try to get it from an environment variable
                    password = System.getenv("ARTIFACTORY_PUBLISH_PASSWORD")
                }
            }

            defaults {
                publications('mavenJava')
            }
        }

    }

// make sure we have an artifact to publish
    artifactoryPublish.dependsOn jar


    if (version.toString().contains("dirty")) {
        artifactoryPublish.skip = true // as documented
        artifactoryPublish.onlyIf { false } // NOT documented

    }
}
